{"version":3,"sources":["library/reportWebVitals.ts","library/serviceWorkerRegistration.ts","apps/home/home.tsx","shared/assets/icons/lock.svg","shared/assets/icons/linkedin.svg","components/footer/footer.tsx","components/navbar/navbar.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","Home","className","Footer","id","href","src","lockImg","alt","linkedinLogo","navMenuOpen","navbar","document","querySelector","navbtn","navMenuClose","Navbar","onClick","getElementById","hasChildNodes","hydrate","render","_targetFunc","targetFunc","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yNAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,qBCRpBC,EAPF,WACX,OAAO,qBAAKC,UAAU,UAAf,SACL,qBAAKA,UAAU,uBCJJ,G,MAAA,IAA0B,kCCA1B,MAA0B,qCCyB1BC,EArBA,WACb,OAAO,sBAAKC,GAAG,SAAR,UACL,sBAAKA,GAAG,cAAR,UACE,0CAAY,mBAAGC,KAAK,oBAAR,2BAAZ,OACA,0CAAY,mBAAGA,KAAK,6BAAR,iCAAZ,OACA,wFAEF,sBAAKD,GAAG,eAAR,UACE,qBAAKA,GAAG,gBACR,sBAAKA,GAAG,cAAR,UACE,mBAAGC,KAAK,4GAAR,SACE,qBAAKC,IAAKC,EAASC,IAAI,kBAEzB,mBAAGH,KAAK,+CAAR,SACE,qBAAKC,IAAKG,EAAcD,IAAI,yBChBhCE,G,MAAc,WAClB,IAAMC,EAASC,SAASC,cAAc,WAChCC,EAASF,SAASC,cAAc,oBACtCF,EAAOT,UAAY,mBACnBY,EAAOZ,UAAY,yBAGfa,EAAe,WACnB,IAAMJ,EAASC,SAASC,cAAc,WAChCC,EAASF,SAASC,cAAc,oBACtCF,EAAOT,UAAY,cACnBY,EAAOZ,UAAY,mBAqBNc,EAlBA,WACb,OAAO,sBAAKZ,GAAG,aAAR,UACL,qBAAKA,GAAG,WACR,sBAAKA,GAAG,SAASF,UAAU,cAAce,QAASF,EAAlD,UACE,4CACA,8CACA,iDACA,mDAEF,qBACEX,GAAG,kBACHF,UAAU,kBACVe,QAASP,SCbK,WAAO,IAAD,EACxB,iBAAIE,SAASM,eAAe,eAA5B,aAAI,EAAiCC,iBAC5BC,UACFC,UAEUC,EAGnBC,CACE,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,OAEFZ,SAASM,eAAe,SNuGpB,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAACsC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YMtG5B9C,M","file":"static/js/main.dff4b864.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './home.css';\n\nconst Home = () => {\n  return <div className=\"article\">\n    <div className=\"article-content\">\n    </div>\n  </div>\n}\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/lock.aa68684c.svg\";","export default __webpack_public_path__ + \"static/media/linkedin.5dff89f2.svg\";","import './footer.css';\nimport lockImg from '../../shared/assets/icons/lock.svg';\nimport linkedinLogo from '../../shared/assets/icons/linkedin.svg';\n\nconst Footer = () => {\n  return <div id=\"footer\">\n    <div id=\"footer-info\">\n      <h6> Phone: <a href=\"tel:0191 933 0028\">0191 933 0028</a> </h6>\n      <h6> Email: <a href=\"mailto:info@pardoewray.com\">info@pardoewray.com</a> </h6>\n      <h6> 3 Bankside | The Watermark | Gateshead | NE11 9SY </h6>\n    </div>\n    <div id=\"footer-right\">\n      <div id=\"footer-logo\"/>\n      <div id=\"footer-refs\">\n        <a href=\"https://5c56eae8-0f8b-4751-9b48-4bdb49242d47.filesusr.com/ugd/541e18_26b3fd278755469b88d7814590a08071.pdf\">\n          <img src={lockImg} alt=\"GDPR Policy\" />\n        </a>\n        <a href=\"https://www.linkedin.com/company/pardoewray/\">\n          <img src={linkedinLogo} alt=\"linkedin\"/>\n        </a>\n      </div>\n    </div>\n  </div>\n};\n\nexport default Footer;\n","import './navbar.css';\n\nconst navMenuOpen = () => {\n  const navbar = document.querySelector('#navbar') as HTMLDivElement;\n  const navbtn = document.querySelector('#nav-menu-button') as HTMLDivElement;\n  navbar.className = 'navbar-menu-open';\n  navbtn.className = 'nav-menu-button-open';\n}\n\nconst navMenuClose = () => {\n  const navbar = document.querySelector('#navbar') as HTMLDivElement;\n  const navbtn = document.querySelector('#nav-menu-button') as HTMLDivElement;\n  navbar.className = 'navbar-menu';\n  navbtn.className = 'nav-menu-button';\n}\n\nconst Navbar = () => {\n  return <div id=\"nav-header\">\n    <div id=\"header\" />\n    <div id=\"navbar\" className=\"navbar-menu\" onClick={navMenuClose}>\n      <button> Home </button>\n      <button> Client </button>\n      <button> Candidate </button>\n      <button> About Us </button>\n    </div>\n    <div\n      id=\"nav-menu-button\"\n      className=\"nav-menu-button\"\n      onClick={navMenuOpen}\n    />\n  </div>\n};\n\n\nexport default Navbar;\n","// NODE MODULE IMPORTS\nimport React from 'react';\nimport { hydrate, render } from \"react-dom\";\n\n// LOCAL REQUIREMENTS\nimport reportWebVitals from './library/reportWebVitals';\nimport * as serviceWorkerRegistration from './library/serviceWorkerRegistration';\n\n// APPLICATION IMPORTS\nimport './index.css';\nimport Home from './apps/home/home';\nimport Footer from './components/footer/footer';\nimport Navbar from './components/navbar/navbar';\n\n// SERVER SIDE RENDERING\nconst _targetFunc = () => {\n  if (document.getElementById(\"root\")?.hasChildNodes())\n    return hydrate\n  return render\n}\nconst targetFunc = _targetFunc()\n\n// APPLICATION INDEX\ntargetFunc(\n  <React.StrictMode>\n    <Navbar />\n    <Home />\n    <Footer />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// SERVICE WORKER\nserviceWorkerRegistration.unregister();\n\n// WEB VITALS\nreportWebVitals();\n"],"sourceRoot":""}